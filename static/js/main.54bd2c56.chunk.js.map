{"version":3,"sources":["components/section.tsx","branding.tsx","hours-of-operation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Section","props","className","headerText","isEditing","Button","onClick","onEditingChange","variant","onSave","children","INITIAL_STATE","fullName","shortName","welcomeText","Branding","React","setIsEditing","publishedDetails","setPublishedDetails","draftDetails","setDraftDetails","id","type","value","name","onChange","event","target","OpenStatus","Day","startDate","Date","setHours","setMinutes","setSeconds","endDate","DEFAULT_START_TIME","DEFAULT_END_TIME","Map","SUNDAY","status","CLOSED","hours","MONDAY","OPEN","startTime","endTime","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","HoursOfOperation","dailyOperationsHoursPublished","setDailyOperationsHoursPublished","dailyOperationsHoursDraft","setDailyOperationsHoursDraft","utils","DateFnsUtils","rows","day","dayOperationHours","push","FormControlLabel","control","Switch","checked","color","produce","draft","set","label","date","formatDate","renderDailyRangeRows","format","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","primary","main","enableMapSet","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.54bd2c56.chunk.js","sourcesContent":["import { Button } from \"@material-ui/core\";\nimport * as React from \"react\";\n\ninterface Props {\n  headerText: string;\n  isEditing: boolean;\n  onEditingChange: () => void;\n  onSave: () => void;\n  children: React.ReactNode;\n}\n\nexport function Section(props: Props): JSX.Element {\n  return (\n    <section className=\"content-section\">\n      <div className=\"section-header\">\n        <h2>{props.headerText}</h2>\n        {props.isEditing ? (\n          <div>\n            <Button onClick={props.onEditingChange} className=\"cancel-button\">\n              Cancel\n            </Button>\n            <Button variant=\"contained\" onClick={props.onSave} className=\"save-button\">\n              Save\n            </Button>\n          </div>\n        ) : (\n          <Button className=\"header-edit-button\" onClick={props.onEditingChange}>\n            Edit\n          </Button>\n        )}\n      </div>\n      {props.children}\n    </section>\n  );\n}\n","import * as React from \"react\";\nimport { Section } from \"./components/section\";\n\ntype DetailsState = {\n  fullName: string;\n  shortName: string;\n  welcomeText: string;\n};\n\nconst INITIAL_STATE: DetailsState = {\n  fullName: \"Bright.md Hospital\",\n  shortName: \"BMD\",\n  welcomeText: \"Get a quick diagnosis for many medication conditions from your computer or mobile device\",\n};\n\nexport function Branding(): JSX.Element {\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [publishedDetails, setPublishedDetails] = React.useState<DetailsState>(INITIAL_STATE);\n  const [draftDetails, setDraftDetails] = React.useState<DetailsState>(INITIAL_STATE);\n\n  function handleToggleEditing() {\n    setIsEditing((isEditing) => !isEditing);\n  }\n\n  function handlePublish() {\n    setPublishedDetails(draftDetails);\n    setIsEditing(false);\n  }\n\n  function handleChangeFullName(event: React.ChangeEvent<HTMLInputElement>) {\n    setDraftDetails({ ...draftDetails, fullName: event.target.value });\n  }\n  function handleChangeShortName(event: React.ChangeEvent<HTMLInputElement>) {\n    setDraftDetails({ ...draftDetails, shortName: event.target.value });\n  }\n  function handleChangeWelcomeText(event: React.ChangeEvent<HTMLInputElement>) {\n    setDraftDetails({ ...draftDetails, welcomeText: event.target.value });\n  }\n\n  return (\n    <Section isEditing={isEditing} headerText=\"Branding\" onEditingChange={handleToggleEditing} onSave={handlePublish}>\n      <p className=\"subheader\">\n        Set name, welcome page text, and other branding for your patients to see during an exam.\n      </p>\n      <h3>Display Name</h3>\n      <p>\n        Set how the organization name is displayed to patients. In instances with limited screen space (emails, mobile\n        view), a shortened name is displayed\n      </p>\n      <div id=\"branding-container\">\n        <div className=\"branding-row\">\n          <p className=\"branding-row-question\">Full Name</p>\n          {isEditing ? (\n            <input\n              type=\"text\"\n              className=\"text-field\"\n              value={draftDetails.fullName}\n              name=\"full name\"\n              id=\"full-name\"\n              onChange={handleChangeFullName}\n            />\n          ) : (\n            <p>{publishedDetails.fullName}</p>\n          )}\n        </div>\n        <div className=\"branding-row\">\n          <p className=\"branding-row-question\">Short Name</p>\n          {isEditing ? (\n            <input\n              type=\"text\"\n              className=\"text-field\"\n              name=\"short name\"\n              id=\"short-name\"\n              value={draftDetails.shortName}\n              onChange={handleChangeShortName}\n            />\n          ) : (\n            <p>{publishedDetails.shortName}</p>\n          )}\n        </div>\n        <div className=\"branding-row\">\n          <p className=\"branding-row-question\">Welcome Text</p>\n          {isEditing ? (\n            <input\n              type=\"text\"\n              className=\"text-field\"\n              name=\"welcome text\"\n              id=\"welcome-text\"\n              value={draftDetails.welcomeText}\n              onChange={handleChangeWelcomeText}\n            />\n          ) : (\n            <p>{publishedDetails.welcomeText}</p>\n          )}\n        </div>\n      </div>\n    </Section>\n  );\n}\n","import DateFnsUtils from \"@date-io/date-fns\";\nimport { FormControlLabel, Switch } from \"@material-ui/core\";\nimport { KeyboardTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport format from \"date-fns/format\";\nimport produce from \"immer\";\nimport * as React from \"react\";\nimport { Section } from \"./components/section\";\n\nenum OpenStatus {\n  OPEN = \"Open\",\n  CLOSED = \"Closed\",\n}\n\ntype DayOperationHours =\n  | { status: OpenStatus.OPEN; hours: { startTime: Date; endTime: Date } }\n  | { status: OpenStatus.CLOSED; hours: null };\n\nenum Day {\n  SUNDAY = \"Sunday\",\n  MONDAY = \"Monday\",\n  TUESDAY = \"Tuesday\",\n  WEDNESDAY = \"Wednesday\",\n  THURSDAY = \"Thursday\",\n  FRIDAY = \"Friday\",\n  SATURDAY = \"Saturday\",\n}\n\ntype DailyOperationsHours = Map<Day, DayOperationHours>;\n\nconst [DEFAULT_START_TIME, DEFAULT_END_TIME] = (function getInitialTimes(): [Date, Date] {\n  const startDate = new Date();\n  startDate.setHours(9);\n  startDate.setMinutes(0);\n  startDate.setSeconds(0);\n\n  const endDate = new Date();\n  endDate.setHours(17);\n  endDate.setMinutes(0);\n  endDate.setSeconds(0);\n\n  return [startDate, endDate];\n})();\n\nconst INITIAL_STATE: DailyOperationsHours = new Map([\n  [Day.SUNDAY, { status: OpenStatus.CLOSED, hours: null }],\n  [Day.MONDAY, { status: OpenStatus.OPEN, hours: { startTime: DEFAULT_START_TIME, endTime: DEFAULT_END_TIME } }],\n  [Day.TUESDAY, { status: OpenStatus.OPEN, hours: { startTime: DEFAULT_START_TIME, endTime: DEFAULT_END_TIME } }],\n  [Day.WEDNESDAY, { status: OpenStatus.OPEN, hours: { startTime: DEFAULT_START_TIME, endTime: DEFAULT_END_TIME } }],\n  [Day.THURSDAY, { status: OpenStatus.OPEN, hours: { startTime: DEFAULT_START_TIME, endTime: DEFAULT_END_TIME } }],\n  [Day.FRIDAY, { status: OpenStatus.OPEN, hours: { startTime: DEFAULT_START_TIME, endTime: DEFAULT_END_TIME } }],\n  [Day.SATURDAY, { status: OpenStatus.CLOSED, hours: null }],\n]);\n\nexport function HoursOfOperation(): JSX.Element {\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [dailyOperationsHoursPublished, setDailyOperationsHoursPublished] = React.useState<DailyOperationsHours>(\n    INITIAL_STATE\n  );\n  const [dailyOperationsHoursDraft, setDailyOperationsHoursDraft] = React.useState<DailyOperationsHours>(\n    dailyOperationsHoursPublished\n  );\n\n  function handleToggleEditing() {\n    setIsEditing((isEditing) => !isEditing);\n  }\n\n  function handlePublish() {\n    setDailyOperationsHoursPublished(dailyOperationsHoursDraft);\n    setIsEditing(false);\n  }\n\n  function renderDailyRangeRows(): Array<JSX.Element> {\n    let rows = [];\n    if (isEditing) {\n      for (const [day, dayOperationHours] of dailyOperationsHoursDraft) {\n        rows.push(\n          <tr key={day}>\n            <td>{day}</td>\n            <td>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={dayOperationHours.status === OpenStatus.OPEN}\n                    name=\"isOpened\"\n                    color=\"primary\"\n                    onChange={() => {\n                      setDailyOperationsHoursDraft(\n                        produce(dailyOperationsHoursDraft, (draft) => {\n                          draft.set(\n                            day,\n                            dayOperationHours.status === OpenStatus.OPEN\n                              ? { status: OpenStatus.CLOSED, hours: null }\n                              : {\n                                  status: OpenStatus.OPEN,\n                                  hours: { startTime: DEFAULT_START_TIME, endTime: DEFAULT_END_TIME },\n                                }\n                          );\n                        })\n                      );\n                    }}\n                  />\n                }\n                label={dayOperationHours.status}\n              />\n            </td>\n            {dayOperationHours.status === OpenStatus.OPEN ? (\n              <td>\n                <KeyboardTimePicker\n                  label=\"start\"\n                  className=\"date-picker\"\n                  value={dayOperationHours.hours.startTime}\n                  onChange={(date) => {\n                    setDailyOperationsHoursDraft(\n                      produce(dailyOperationsHoursDraft, (draft) => {\n                        if (dayOperationHours.status === OpenStatus.OPEN) {\n                          draft.set(day, {\n                            ...dayOperationHours,\n                            hours: { ...dayOperationHours.hours, startTime: date as Date },\n                          });\n                        }\n                      })\n                    );\n                  }}\n                />\n                {/* <span>{\"-\"}</span> */}\n                <KeyboardTimePicker\n                  label=\"end\"\n                  className=\"date-picker\"\n                  value={dayOperationHours.hours.endTime}\n                  onChange={(date) => {\n                    setDailyOperationsHoursDraft(\n                      produce(dailyOperationsHoursDraft, (draft) => {\n                        if (dayOperationHours.status === OpenStatus.OPEN) {\n                          draft.set(day, {\n                            ...dayOperationHours,\n                            hours: { ...dayOperationHours.hours, endTime: date as Date },\n                          });\n                        }\n                      })\n                    );\n                  }}\n                />\n              </td>\n            ) : (\n              <td></td>\n            )}\n          </tr>\n        );\n      }\n    } else {\n      for (const [day, dayOperationHours] of dailyOperationsHoursPublished) {\n        rows.push(\n          <tr key={day}>\n            <td>{day}</td>\n            <td>{dayOperationHours.status}</td>\n            {dayOperationHours.status === OpenStatus.OPEN ? (\n              <td>\n                {formatDate(dayOperationHours.hours.startTime)} - {formatDate(dayOperationHours.hours.endTime)}\n              </td>\n            ) : (\n              <td></td>\n            )}\n          </tr>\n        );\n      }\n    }\n    return rows;\n  }\n\n  return (\n    <Section\n      isEditing={isEditing}\n      headerText=\"Hours of Operation\"\n      onEditingChange={handleToggleEditing}\n      onSave={handlePublish}\n    >\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <p className=\"subheader\">\n          Manage standard hours of operations when providers are available to provide care. Patients will be informed if\n          they submit an exam outside these hours\n        </p>\n        <table>\n          <tbody>{renderDailyRangeRows()}</tbody>\n        </table>\n      </MuiPickersUtilsProvider>\n    </Section>\n  );\n}\n\nfunction formatDate(date: Date) {\n  return format(date, \"p\");\n}\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { Branding } from \"./branding\";\nimport { HoursOfOperation } from \"./hours-of-operation\";\n\nexport function App(): JSX.Element {\n  return (\n    <div id=\"app-container\">\n      <HoursOfOperation />\n      <Branding />\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport { enableMapSet } from \"immer\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#6161ff\",\n    },\n  },\n});\n\nenableMapSet();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}